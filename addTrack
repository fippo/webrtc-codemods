/* replace
 *   pc.addStream(stream);
 * with
 *   stream.getTracks().forEach(function(t) {
 *     pc.addTrack(t, stream);
 *   });
 */
export default function transformer(file, api) {
  const j = api.jscodeshift;

  return j(file.source)
    .find(j.CallExpression, {callee: {property: {type: 'Identifier', name: 'addStream'}}})
    .replaceWith(function(p) {
      var pc = p.value.callee.object;
      var stream = p.value.arguments[0];
      return j.callExpression(
        j.memberExpression(
          j.callExpression(
            j.memberExpression(stream, j.identifier('getTracks')),
            []
          ),
          j.identifier('forEach')
        ),
        [j.functionExpression(
          null,
          [j.identifier('track')],
          j.blockStatement([
            j.expressionStatement(
              j.callExpression(
                j.memberExpression(pc, j.identifier('addTrack')),
                [j.identifier('track'), stream]
              )
            )
          ])
        )]
      );
    })
    .toSource({wrapColumn: 8});
};
